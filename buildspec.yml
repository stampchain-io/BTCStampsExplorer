version: 0.2
phases:
  install:
    runtime-versions:
      docker: latest
    commands:
      - echo "Installing dependencies using amazonlinux2-x86_64-standard:4.0 (amd64 architecture)"
      - echo "Image will be compatible with ECS Fargate without platform flag"
  pre_build:
    commands:
      - echo "Setting AWS account ID and image name"
      - export ECR_REPO=stamps-app/front-end
      - export FULL_ECR_REPO_URL=$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO
      # Login to ECR to push images
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
      # Pull existing latest image to use as cache and avoid rate limits
      - echo "Trying to pull existing latest image to use as cache..."
      - docker pull $FULL_ECR_REPO_URL:latest || echo "No latest image found, will build from scratch"
  build:
    commands:
      - echo "Building the Docker image"
      - if [ -z "$VERSION_TAG" ]; then export IMAGE_TAG="prod-$(date +%Y%m%d%H%M%S)-fallback"; else export IMAGE_TAG="$VERSION_TAG"; fi
      - echo "Using IMAGE_TAG=$IMAGE_TAG"
      - echo "Building Docker image for amd64 (default for this CodeBuild environment)..."
      # Using the --cache-from flag to use the pulled image as cache
      - docker build --cache-from $FULL_ECR_REPO_URL:latest -t $FULL_ECR_REPO_URL:$IMAGE_TAG .
      - docker tag $FULL_ECR_REPO_URL:$IMAGE_TAG $FULL_ECR_REPO_URL:latest
  post_build:
    commands:
      - echo "Pushing the Docker image"
      - docker push $FULL_ECR_REPO_URL:$IMAGE_TAG
      - docker push $FULL_ECR_REPO_URL:latest
      - echo "Completed pushing Docker image"
      - echo $IMAGE_TAG > image_tag.txt
artifacts:
  files:
    - image_tag.txt
  discard-paths: yes