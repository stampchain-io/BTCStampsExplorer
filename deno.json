{
  "lock": false,
  "lockfile": "deno.lock",
  "tasks": {
    "check:fmt": "deno fmt --check .",
    "check:fmt:debug": "deno fmt --check --log-level=debug . && find . -type f -name '*.ts' -o -name '*.tsx' | grep -v -E '(node_modules|_fresh|.git|coverage|tmp|.cache|build|vendor|static)' | wc -l",
    "check:lint": "deno lint --quiet",
    "check:lint:debug": "deno lint --json",
    "check:types": "deno check main.ts dev.ts",
    "check:types:debug": "deno check --log-level=debug main.ts dev.ts",
    "check": "deno task check:fmt && deno task check:lint && deno task check:types",
    "check:debug": "deno task check:fmt:debug && deno task check:lint:debug && deno task check:types:debug",
    "start": "deno task check_version && deno run -A main.ts",
    "dev": "deno run --inspect --allow-all --watch --watch-exclude=dist/,node_modules/,_fresh/,.git/,coverage/,tmp/,tests/,fresh.gen.ts --no-clear-screen dev.ts --host",
    "dev:nowatch": "deno run --inspect --allow-all --watch=routes/ --watch-exclude=dist/,node_modules/,_fresh/,.git/,coverage/,tmp/,tests/,static/ --no-clear-screen dev.ts --host",
    "build": "deno run --unstable-byonm -A main.ts build",
    "dev:build": "deno task build && deno task dev",
    "docs": "deno run --allow-read --allow-write swagger.js",
    "fakebuild": "echo 'fake build'",
    "preview": "deno run -A main.ts",
    "update": "deno run -A -r https://fresh.deno.dev/update .",
    "decode": "deno run -A utils/decodeSrc20MsigTx.ts",
    "decode_olga": "deno run -A utils/decodeSrc20OlgaTx.ts",
    "check_version": "deno run --allow-run --allow-env utils/check_deno_version.ts",
    "cleanup": "deno run --allow-run scripts/cleanup.ts",
    "dev:safe": "deno task cleanup && deno task dev",
    "validate:schema": "npx @redocly/cli lint --config .redocly.yaml --format stylish ./schema.yml",
    "test:api": "docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:simple": "docker-compose -f docker-compose.test.yml run --rm newman-simple",
    "test:api:advanced": "docker-compose -f docker-compose.test.yml run --rm newman-advanced",
    "test:api:parallel": "docker-compose -f docker-compose.test.yml run --rm newman-parallel",
    "test:api:performance": "docker-compose -f docker-compose.test.yml run --rm newman-performance",
    "test:api:enhanced": "NEWMAN_COLLECTION=postman-collection-enhanced.json NEWMAN_REPORTERS=cli,html,json,enhanced docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:folder": "NEWMAN_FOLDER=${FOLDER:-} docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:verbose": "NEWMAN_VERBOSE=true docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:bail": "NEWMAN_BAIL=true docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:iterations": "NEWMAN_ITERATIONS=${ITERATIONS:-3} docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:timeout": "NEWMAN_TIMEOUT=${TIMEOUT:-60000} docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:dev-only": "PROD_BASE_URL=http://host.docker.internal:8000 docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:prod-only": "DEV_BASE_URL=https://stampchain.io docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:all": "deno task test:api:simple && deno task test:api:advanced && deno task test:api:performance",
    "test:api:clean": "rm -rf reports/newman* && docker-compose -f docker-compose.test.yml run --rm newman",
    "test:api:full": "deno task test:api && deno task perf:analyze:latest && deno task alerts:process && deno task dashboard:generate",
    "test:api:full:performance": "deno task test:api:performance && deno task perf:analyze:latest && deno task alerts:process && deno task dashboard:generate",
    "perf:monitor": "deno run --allow-read --allow-write scripts/performance-monitor.ts analyze",
    "perf:baseline": "deno run --allow-read --allow-write scripts/performance-monitor.ts baseline",
    "perf:report": "deno run --allow-read --allow-write scripts/performance-monitor.ts report",
    "perf:analyze:latest": "deno run --allow-read --allow-write scripts/performance-monitor.ts analyze reports/newman-simple/20250613_044618-results.json",
    "alerts:process": "deno run --allow-read --allow-write --allow-net --allow-env scripts/alert-system.ts process",
    "alerts:test": "deno run --allow-read --allow-write --allow-net --allow-env scripts/alert-system.ts test",
    "alerts:status": "deno run --allow-read --allow-write --allow-net --allow-env scripts/alert-system.ts status",
    "dashboard:generate": "deno run --allow-read --allow-write --allow-net scripts/performance-dashboard.ts generate",
    "test:version": "deno test -A --log-level=debug --no-check tests/versioning/versionChain.test.ts",
    "test:src20": "deno test --allow-net tests/src20/createTransaction.test.ts tests/src20/api-compatibility.ts tests/src20/performance.test.ts --no-check --allow-read --allow-env --allow-write",
    "test:src20:watch": "deno test --allow-net tests/src20/createTransaction.test.ts tests/src20/api-compatibility.ts tests/src20/performance.test.ts --no-check --allow-read --allow-env --allow-write --watch",
    "test:fees": "deno test --allow-net tests/fee-fallback.test.ts tests/quicknode-fees.test.ts tests/redis-fee-system.test.ts --no-check --allow-read --allow-env --allow-write",
    "test:fees:watch": "deno test --allow-net tests/fee-fallback.test.ts tests/quicknode-fees.test.ts tests/redis-fee-system.test.ts --no-check --allow-read --allow-env --allow-write --watch",
    "test:redis-fees": "deno test --allow-net tests/redis-fee-system.test.ts --no-check --allow-read --allow-env --allow-write",
    "test:redis-fees:watch": "deno test --allow-net tests/redis-fee-system.test.ts --no-check --allow-read --allow-env --allow-write --watch",
    "test:security": "deno test --allow-net tests/fee-security.test.ts --no-check --allow-read --allow-env --allow-write",
    "test:security:watch": "deno test --allow-net tests/fee-security.test.ts --no-check --allow-read --allow-env --allow-write --watch",
    "test:performance": "deno test --allow-net tests/fee-performance.test.ts --no-check --allow-read --allow-env --allow-write",
    "test:performance:watch": "deno test --allow-net tests/fee-performance.test.ts --no-check --allow-read --allow-env --allow-write --watch",
    "test:btc-price": "deno test --allow-net tests/btc-price-caching.test.ts --no-check --allow-read --allow-env --allow-write",
    "test:btc-price:watch": "deno test --allow-net tests/btc-price-caching.test.ts --no-check --allow-read --allow-env --allow-write --watch",
    "test:unit": "deno test tests/unit/ --no-check",
    "test:unit:coverage": "mkdir -p coverage && deno test --coverage=coverage/ tests/unit/ --no-check && deno coverage coverage/",
    "analyze:types": "deno run --allow-run --allow-write scripts/analyze-type-errors.ts"
  },
  "lint": {
    "rules": {
      "tags": ["fresh", "recommended"],
      "include": [
        "ban-untagged-todo",
        "no-node-buffer",
        "prefer-native-node-imports"
      ],
      "exclude": ["no-explicit-any", "react-no-danger"]
    },
    "exclude": [
      "**/_fresh/**/*",
      "**/node_modules/**/*",
      "**/dist/**/*",
      "**/.git/**/*",
      "**/coverage/**/*",
      "**/tmp/**/*",
      "**/.cache/**/*",
      "**/build/**/*",
      "**/vendor/**/*"
    ],
    "include": [
      "routes/",
      "components/",
      "islands/",
      "lib/",
      "utils/",
      "client/",
      "tests/"
    ]
  },
  "exclude": ["**/_fresh/*", "**/server/**/*"],
  "nodeModulesDir": "auto",
  "imports": {
    "stream": "node:stream",
    "stream/promises": "node:stream/promises",
    "stream/consumers": "node:stream/consumers",
    "stream/web": "node:stream/web",
    "events": "node:events",
    "buffer": "node:buffer",
    "crypto": "node:crypto",
    "tls": "node:tls",
    "net": "node:net",
    "dns": "node:dns",
    "dns/promises": "node:dns/promises",
    "@preact/signals": "https://esm.sh/*@preact/signals@1.2.2",
    "@preact/signals-core": "https://esm.sh/*@preact/signals-core@1.5.1",
    "@std/assert": "jsr:/@std/assert@^1.0.9",
    "@std/async": "jsr:/@std/async@^1.0.5",
    "@std/crypto": "jsr:@std/crypto@^1.0.3",
    "@std/dotenv": "jsr:/@std/dotenv@^0.225.2",
    "@std/encoding": "jsr:@std/encoding@^1.0.5",
    "@std/fs": "jsr:/@std/fs@^1.0.5",
    "@std/log": "jsr:/@std/log@0.224.0",
    "@std/path": "jsr:/@std/path@^0.219.1",
    "@std/testing": "jsr:/@std/testing@^1.0.6",
    "@std/yaml": "jsr:/@std/yaml@^0.219.1",
    "axiod": "https://deno.land/x/axiod@0.26.2/mod.ts",
    "bitcoinjs-lib": "npm:bitcoinjs-lib@7.0.0-rc.0",
    "big": "https://esm.sh/big.js@6.2.1",
    "bigfloat/": "https://deno.land/x/bigfloat@v3.0.2/",
    "compress": "https://deno.land/x/foras@v2.1.4/src/deno/mod.ts",
    "dayjs": "https://esm.sh/dayjs@1.11.10",
    "dayjs/": "https://esm.sh/dayjs@1.11.10/",
    "djwt/": "https://deno.land/x/djwt@v3.0.2/",
    "dom": "https://deno.land/x/deno_dom@v0.1.49/deno-dom-wasm.ts",
    "flatpickr": "https://esm.sh/flatpickr@4.6.13",
    "flatpickr/": "https://esm.sh/flatpickr@4.6.13/",
    "$fresh/": "https://deno.land/x/fresh@1.7.3/",
    "fresh_charts/": "https://deno.land/x/fresh_charts@0.3.1/",
    "fresh/tests/": "https://deno.land/x/fresh@1.7.6/tests/",
    "msgpack": "https://deno.land/x/msgpack@v1.4/mod.ts",
    "mysql/": "https://deno.land/x/mysql@v2.12.1/",
    "preact": "https://esm.sh/preact@10.22.0",
    "preact/": "https://esm.sh/preact@10.22.0/",
    "puppeteer": "https://deno.land/x/puppeteer@16.2.0/mod.ts",
    "qrcode": "https://esm.sh/qrcode@1.5.1",
    "redis": "https://deno.land/x/redis@v0.32.4/mod.ts",
    "swiper/": "https://esm.sh/swiper@11.1.14/",
    "swiper": "https://esm.sh/swiper@11.1.14",
    "sweetalert2": "https://esm.sh/sweetalert2@11.15.10",
    "tailwindcss": "npm:tailwindcss@3.4.17",
    "tailwindcss/": "npm:tailwindcss@3.4.17/",
    "tailwindcss/plugin": "npm:tailwindcss@3.4.17/plugin.js",
    "tiny-secp256k1": "npm:tiny-secp256k1@2.2.3",
    "js-beautify": "https://esm.sh/js-beautify@1.15.4",
    "highcharts": "https://esm.sh/highcharts@11.2.0",
    "highcharts/": "https://esm.sh/highcharts@11.2.0/",
    "highcharts-react-official": "https://esm.sh/highcharts-react-official@3.2.1",
    "screenshotone-api-sdk": "https://esm.sh/screenshotone-api-sdk@1.1.19",
    "$/": "./",
    "$client/": "./client/",
    "$components/": "./components/",
    "$constants": "./lib/utils/constants.ts",
    "$globals": "./globals.d.ts",
    "$handlers/": "./routes/handlers/",
    "$islands/": "./islands/",
    "$lib/": "./lib/",
    "$routes/": "./routes/",
    "$server/": "./server/",
    "$types/": "./lib/types/",
    "$layout": "./components/layout/index.ts",
    "$header": "./islands/header/index.ts",
    "$content": "./islands/content/index.ts",
    "$section": "./islands/section/index.ts",
    "$card": "./islands/card/index.ts",
    "$tool": "./islands/tool/index.ts",
    "$text": "./components/text/styles.ts",
    "$button": "./components/button/index.ts",
    "$icon": "./components/icon/index.ts",
    "$form": "./components/form/index.ts",
    "$notification": "./components/notification/index.ts",
    "$table": "./islands/table/index.ts",
    "$fees": "./lib/hooks/useFees.ts",
    "$animation": "./lib/hooks/useAnimationControls.ts"
  },
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "preact",
    "strict": true,
    "types": ["npm:@types/node", "npm:@types/bitcoinjs-lib"],
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "exactOptionalPropertyTypes": true,
    "noFallthroughCasesInSwitch": true
  },
  "fmt": {
    "include": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/*.json"],
    "exclude": [
      "**/_fresh/**/*",
      "**/server/**/*",
      "**/node_modules/**/*",
      "**/dist/**/*",
      "**/.git/**/*",
      "**/coverage/**/*",
      "**/tmp/**/*",
      "**/.cache/**/*",
      "**/.*/",
      "**/.*",
      "**/build/**/*",
      "**/vendor/**/*",
      "**/*.yml",
      "**/*.yaml",
      "**/schema.yml",
      "**/swagger/**/*.yml",
      "**/swagger/**/*.yaml",
      "**/.redocly.*",
      "**/*.css",
      "**/*.json",
      "**/*.md",
      "**/*.html",
      "**/static/**/*",
      ".vscode/**/*",
      ".idea/**/*",
      ".github/**/*",
      ".git/**/*",
      ".env*"
    ],
    "useTabs": false,
    "lineWidth": 80,
    "indentWidth": 2,
    "singleQuote": false,
    "proseWrap": "preserve"
  }
}
