name: Code Quality
on:
  push:
    branches: [dev]
  pull_request:
    branches: [main, dev]
    types: [opened, synchronize, reopened]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging jobs

    permissions:
      id-token: write    # Needed for auth with Deno Deploy
      contents: read     # Needed to clone the repository
      pull-requests: write  # Needed for PR comments

    env:
      CSRF_SECRET_KEY: "12323"  # Placeholder key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache npm dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci  # More reliable than npm install
        
      - name: Validate OpenAPI Schema
        run: npm run validate:ci

      # Cache Deno dependencies
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1.4
          
      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      # Code Quality Checks
      - name: Check formatting and linting
        id: checks
        if: always()
        run: |
          # Create output directories
          mkdir -p fmt_output lint_output
          
          # Debug current directory
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Run checks directly into XML processing
          echo "Running deno fmt check and processing output..."
          deno task check:fmt 2>&1 | tee full_fmt.txt || true
          
          echo "Running deno lint and processing output..."
          deno task check:lint 2>&1 | tee full_lint.txt || true
          
          # Show command outputs regardless of exit code
          echo "=== fmt command output ==="
          cat full_fmt.txt
          echo "=== lint command output ==="
          cat full_lint.txt
          
          echo "=== Debug: Raw outputs ==="
          echo "=== fmt output ==="
          cat full_fmt.txt
          echo "=== lint output ==="
          cat full_lint.txt
          echo "=== End raw outputs ==="
          
          # Create output directories
          mkdir -p fmt_output lint_output
          
          # Process formatting issues
          echo "Processing format issues..."
          current_file=""
          while IFS= read -r line; do
            if [[ "$line" =~ ^from\ +([^:]+):$ ]]; then
              # Close previous file if exists
              if [ -n "$current_file" ]; then
                echo "</file>" >> "fmt_output/${current_file//\//_}.xml"
                echo "</checkstyle>" >> "fmt_output/${current_file//\//_}.xml"
              fi
              current_file="${BASH_REMATCH[1]}"
              output_file="fmt_output/${current_file//\//_}.xml"
              echo "Creating XML for $current_file -> $output_file"
              echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$output_file"
              echo "<checkstyle version=\"4.3\">" >> "$output_file"
              echo "<file name=\"$current_file\">" >> "$output_file"
            elif [[ "$line" =~ ^\ *([0-9]+)\ *\|\ *[-+].*$ ]] && [ -n "$current_file" ]; then
              line_num="${BASH_REMATCH[1]}"
              message="${line#*|}"
              echo "<error line=\"$line_num\" column=\"1\" severity=\"warning\" message=\"${message//\"/&quot;}\" source=\"deno-fmt\"/>" >> "fmt_output/${current_file//\//_}.xml"
            fi
          done < full_fmt.txt
          # Close the last file if exists
          if [ -n "$current_file" ]; then
            echo "</file>" >> "fmt_output/${current_file//\//_}.xml"
            echo "</checkstyle>" >> "fmt_output/${current_file//\//_}.xml"
          fi
          
          # Add debug output
          echo "=== Debug: Generated XML files ==="
          for f in fmt_output/*.xml; do
            if [ -f "$f" ]; then
              echo "=== Content of $f ==="
              cat "$f"
            fi
          done
          
          # Close fmt XML files
          for f in fmt_output/*.xml; do
            if [ -f "$f" ]; then
              echo "</file>" >> "$f"
              echo "</checkstyle>" >> "$f"
            fi
          done
          
          # Handle last file for fmt
          if [ -n "$current_file" ] && [ -s fmt_current.txt ]; then
            output_file="fmt_output/${current_file//\//_}.xml"
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$output_file"
            echo "<checkstyle version=\"4.3\">" >> "$output_file"
            echo "<file name=\"$current_file\">" >> "$output_file"
            cat fmt_current.txt >> "$output_file"
            echo "</file>" >> "$output_file"
            echo "</checkstyle>" >> "$output_file"
          fi
          
          # Process lint issues
          echo "Processing lint issues..."
          declare -A lint_files
          current_file=""
          current_line=""
          current_col=""
          current_rule=""
          current_message=""
          
          while IFS= read -r line; do
            if [[ "$line" =~ ^error\[([^]]+)\]:\ +(.+)$ ]]; then
              current_rule="${BASH_REMATCH[1]}"
              current_message="${BASH_REMATCH[2]}"
            elif [[ "$line" =~ ^[[:space:]]*"-->"[[:space:]]*([^:]+):([0-9]+):([0-9]+) ]]; then
              current_file="${BASH_REMATCH[1]}"
              current_line="${BASH_REMATCH[2]}"
              current_col="${BASH_REMATCH[3]}"
              
              output_file="lint_output/${current_file//\//_}.xml"
              if [ ! -f "$output_file" ]; then
                echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > "$output_file"
                echo "<checkstyle version=\"4.3\">" >> "$output_file"
                echo "<file name=\"$current_file\">" >> "$output_file"
                lint_files["$current_file"]=1
              fi
              
              echo "<error line=\"$current_line\" column=\"$current_col\" severity=\"warning\" message=\"[$current_rule] $current_message\" source=\"deno-lint\"/>" >> "$output_file"
              
              # Reset for next error
              current_file=""
              current_line=""
              current_col=""
              current_rule=""
              current_message=""
            fi
          done < <(deno lint 2>&1 | grep -v "^Warning")
          
          # Close all lint output files
          for file in "${!lint_files[@]}"; do
            output_file="lint_output/${file//\//_}.xml"
            echo "</file>" >> "$output_file"
            echo "</checkstyle>" >> "$output_file"
          done
          
          # Debug output
          echo "=== Debug: XML File Generation ==="
          echo "=== Formatting XML Files ==="
          ls -l fmt_output/ || echo "No fmt_output directory"
          echo "=== Linting XML Files ==="
          ls -l lint_output/ || echo "No lint_output directory"
          
          # Verify XML file creation
          echo "=== XML File Count ==="
          find fmt_output/ -name "*.xml" -type f | wc -l
          find lint_output/ -name "*.xml" -type f | wc -l
          
          # Show XML contents
          echo "=== XML File Contents ==="
          for f in fmt_output/*.xml lint_output/*.xml; do
            if [ -f "$f" ]; then
              echo "=== Contents of $f ==="
              cat "$f"
            fi
          done
          
          
          echo "=== Debug: Processed outputs ==="
          echo "=== fmt_processed.txt ==="
          cat fmt_processed.txt || echo "No formatting issues found"
          echo "=== lint_processed.txt ==="
          cat lint_processed.txt || echo "No linting issues found"
          echo "=== End processed outputs ==="

      - name: Run reviewdog
        if: always()
        run: |
          # Report formatting issues
          for f in fmt_output/*.xml; do
            if [ -f "$f" ]; then
              echo "Sending formatting issues to ReviewDog from $f..."
              cat "$f" | reviewdog -f=checkstyle -name=deno-fmt -reporter=github-pr-review -filter-mode=file -level=warning
            fi
          done
          
          # Report linting issues
          for f in lint_output/*.xml; do
            if [ -f "$f" ]; then
              echo "Sending linting issues to ReviewDog from $f..."
              cat "$f" | reviewdog -f=checkstyle -name=deno-lint -reporter=github-pr-review -filter-mode=file -level=warning
            fi
          done
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_DEBUG: 1

      # Fail the workflow if any checks failed
      - name: Check for failures
        if: steps.checks.outcome == 'failure'
        run: exit 1

      # Build check
      - name: Build project
        run: deno task build

      # Commented out for future implementation
      # - name: Type check
      #   run: deno task check:types
      #   continue-on-error: true  # Optional: allow type checks to fail for now
