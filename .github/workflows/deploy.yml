name: Code Quality
on:
  push:
    branches: [dev]
  pull_request:
    branches: [main, dev]
    types: [opened, synchronize, reopened]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging jobs

    permissions:
      id-token: write    # Needed for auth with Deno Deploy
      contents: read     # Needed to clone the repository
      pull-requests: write  # Needed for PR comments

    env:
      CSRF_SECRET_KEY: "12323"  # Placeholder key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache npm dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci  # More reliable than npm install
        
      - name: Validate OpenAPI Schema
        run: npm run validate:ci

      # Cache Deno dependencies
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1.4
          
      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      # Code Quality Checks
      - name: Check formatting
        id: fmt
        run: deno fmt --check 2>&1 | tee fmt_output.txt
        continue-on-error: true  # Allow the workflow to continue for reviewdog

      - name: Report formatting issues (PR Check)
        if: always()
        run: |
          cat fmt_output.txt | reviewdog -f=diff \
            -name="deno-fmt" \
            -reporter=github-pr-check \
            -filter-mode=diff_context \
            -level=warning
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_FAIL_ON_ERROR: "true"

      - name: Report formatting issues (PR Review)
        if: always()
        run: |
          cat fmt_output.txt | reviewdog -f=diff \
            -name="deno-fmt" \
            -reporter=github-pr-review \
            -filter-mode=diff_context \
            -level=warning
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_FAIL_ON_ERROR: "true"

      - name: Check linting
        id: lint
        run: |
          deno lint 2>&1 | tee lint_output.txt
          if [ ! -s lint_output.txt ]; then
            echo "No linting issues found" > lint_output.txt
          fi
        continue-on-error: true  # Allow the workflow to continue for reviewdog

      - name: Report linting issues (PR Check)
        if: always()
        run: |
          cat lint_output.txt | reviewdog \
            -name="deno-lint" \
            -reporter=github-pr-check \
            -filter-mode=diff_context \
            -efm="%f:%l:%c: %m" \
            -level=warning
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_FAIL_ON_ERROR: "true"

      - name: Report linting issues (PR Review)
        if: always()
        run: |
          cat lint_output.txt | reviewdog \
            -name="deno-lint" \
            -reporter=github-pr-review \
            -filter-mode=diff_context \
            -efm="%f:%l:%c: %m" \
            -level=warning
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_FAIL_ON_ERROR: "true"

      # Fail the workflow if any checks failed
      - name: Check for failures
        if: steps.fmt.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1

      # Build check
      - name: Build project
        run: deno task build

      # Commented out for future implementation
      # - name: Type check
      #   run: deno task check:types
      #   continue-on-error: true  # Optional: allow type checks to fail for now
