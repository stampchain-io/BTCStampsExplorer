name: Code Quality
on:
  push:
    branches: [dev]
  pull_request:
    branches: [main, dev]
    types: [opened, synchronize, reopened]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging jobs

    permissions:
      id-token: write    # Needed for auth with Deno Deploy
      contents: read     # Needed to clone the repository
      pull-requests: write  # Needed for PR comments

    env:
      CSRF_SECRET_KEY: "12323"  # Placeholder key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache npm dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci  # More reliable than npm install
        
      - name: Validate OpenAPI Schema
        run: npm run validate:ci

      # Cache Deno dependencies
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1.5
          
      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Run reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Enable debug output and error handling
          set -x
          set -e
          
          # Function to cleanup on error
          cleanup() {
            echo "Error occurred. Cleaning up..."
            pkill -f reviewdog || true
            exit 1
          }
          trap cleanup ERR
          
          # Set timeout for each reviewdog process
          timeout_duration=60  # Increased timeout
          
          # Debug: Show environment
          echo "Current directory: $(pwd)"
          echo "Files in scripts directory:"
          ls -la ./scripts/
          
          # Function to process files in batches with rate limit handling
          process_files() {
            local check_type=$1
            local batch_size=5  # Further reduced batch size for stability
            local total_files=0
            local batch_num=1
            local retry_delay=30  # Reduced initial retry delay
            local max_files=500  # Limit total files to process
            
            # Count total files with limit
            if [ "$check_type" = "fmt" ]; then
              total_files=$(find . -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | head -n $max_files | wc -l)
            else
              total_files=$(find . -type f -name "*.ts" -o -name "*.tsx" | head -n $max_files | wc -l)
            fi
            
            # Process in batches
            for i in $(seq 1 $batch_size $total_files); do
              echo "Processing $check_type batch $batch_num..."
              
              if [ "$check_type" = "fmt" ]; then
                find . -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | head -n $max_files | \
                  tail -n +$i | head -n $batch_size | sort | \
                  xargs -r deno fmt --check 2>&1 | \
                  ./scripts/transform-deno-output.sh fmt > "${check_type}_${batch_num}.json"
              else
                find . -type f -name "*.ts" -o -name "*.tsx" | head -n $max_files | \
                  tail -n +$i | head -n $batch_size | sort | \
                  xargs -r deno lint --json 2>&1 | \
                  ./scripts/transform-deno-output.sh lint > "${check_type}_${batch_num}.json"
              fi
              
              # Run reviewdog on batch with retries
              if [ -s "${check_type}_${batch_num}.json" ]; then
                local attempts=0
                local max_attempts=3
                
                while [ $attempts -lt $max_attempts ]; do
                  echo "Running reviewdog on ${check_type} batch $batch_num (attempt $((attempts + 1)))..."
                  
                  if timeout $timeout_duration bash -c "cat ${check_type}_${batch_num}.json | reviewdog -f=rdjson -name=${check_type} -reporter=github-pr-review"; then
                    break  # Success, exit retry loop
                  else
                    local exit_code=$?
                    # Check if it's a rate limit error
                    if grep -q "API rate limit exceeded" "${check_type}_${batch_num}.json"; then
                      echo "Rate limit exceeded. Waiting ${retry_delay} seconds before retry..."
                      sleep $retry_delay
                      retry_delay=$((retry_delay * 2))  # Exponential backoff
                    else
                      echo "Error running reviewdog (exit code: $exit_code)"
                      break  # Exit on non-rate-limit errors
                    fi
                  fi
                  ((attempts++))
                done
              fi
              
              rm -f "${check_type}_${batch_num}.json"
              ((batch_num++))
              
              # Add a small delay between batches to avoid rate limiting
              sleep 5
            done
          }
          
          # Process fmt and lint separately
          echo "Starting fmt checks..."
          process_files fmt
          
          echo "Starting lint checks..."
          process_files lint
          
          exit 0

      # Fail the workflow if any checks failed
      - name: Check for failures
        if: steps.fmt.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1

      # Build check
      - name: Build project
        run: deno task build

      # Commented out for future implementation
      # - name: Type check
      #   run: deno task check:types
      #   continue-on-error: true  # Optional: allow type checks to fail for now
