name: Code Quality
on:
  push:
    branches: [dev]
  pull_request:
    branches: [main, dev]
    types: [opened, synchronize, reopened]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging jobs

    permissions:
      id-token: write    # Needed for auth with Deno Deploy
      contents: read     # Needed to clone the repository
      pull-requests: write  # Needed for PR comments

    env:
      CSRF_SECRET_KEY: "12323"  # Placeholder key

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache npm dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci  # More reliable than npm install
        
      - name: Validate OpenAPI Schema
        run: npm run validate:ci

      # Cache Deno dependencies
      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.1.4
          
      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Install reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      # Code Quality Checks
      - name: Check formatting
        id: fmt
        if: always()
        run: |
          # Capture only the formatting output after initialization
          deno task check:fmt 2>&1 | tee full_fmt.txt
          # Extract only the formatting diff output
          sed -n '/^from.*:/,/^error: Found.*files$/p' full_fmt.txt > fmt_output.txt
          echo "Formatting check output:"
          cat fmt_output.txt

      - name: Check linting
        id: lint
        if: always()
        run: |
          # Capture only the linting output after initialization
          deno task check:lint 2>&1 | tee full_lint.txt
          # Extract only the actual lint errors
          sed -n '/^error\[.*\]:/,/^$/p' full_lint.txt > lint_output.txt
          echo "Lint check output:"
          cat lint_output.txt

      - name: Run reviewdog
        if: always()
        run: |
          # Process and report formatting issues
          echo "Processing format issues..."
          current_file=""
          while IFS= read -r line; do
            if [[ $line =~ ^from[[:space:]](.+): ]]; then
              current_file="${BASH_REMATCH[1]}"
              echo "Processing file: $current_file"
            elif [[ $line =~ ^[[:space:]]*([0-9]+)[[:space:]]*\|[[:space:]]*(\-.*) ]]; then
              line_num="${BASH_REMATCH[1]}"
              old_content="${BASH_REMATCH[2]}"
              # Read the next line which should contain the new content
              read -r next_line
              if [[ $next_line =~ ^[[:space:]]*[0-9]+[[:space:]]*\|[[:space:]]*(\+.*) ]]; then
                new_content="${BASH_REMATCH[1]}"
                echo "$current_file:$line_num:1:[deno-fmt] Format diff - Old: $old_content | New: $new_content" >> fmt_processed.txt
              fi
            fi
          done < fmt_output.txt
          
          # Process and report linting issues
          echo "Processing lint issues..."
          while IFS= read -r line; do
            if [[ $line =~ ^error\[(.*)\]:[[:space:]]*(.*) ]]; then
              rule="${BASH_REMATCH[1]}"
              message="${BASH_REMATCH[2]}"
              # Read the next line which contains the file path with arrow
              read -r file_line
              if [[ $file_line =~ [[:space:]]*-->[[:space:]]*([^:]+):([0-9]+) ]]; then
                file="${BASH_REMATCH[1]}"
                line_num="${BASH_REMATCH[2]}"
                echo "$file:$line_num:1:[deno-lint/$rule] $message" >> lint_processed.txt
              fi
            fi
          done < lint_output.txt
          
          # Debug output
          echo "=== Debug: Processed Files ==="
          echo "fmt_processed.txt contents:"
          cat fmt_processed.txt || echo "No formatting issues found"
          echo "lint_processed.txt contents:"
          cat lint_processed.txt || echo "No linting issues found"
          echo "=== End Debug ==="

          # Report formatting issues
          if [ -f fmt_processed.txt ]; then
            echo "Sending formatting issues to ReviewDog..."
            cat fmt_processed.txt | reviewdog -f=golint -name=deno-fmt -reporter=github-pr-review -filter-mode=file -level=warning -tee
          fi
          
          # Report linting issues
          if [ -f lint_processed.txt ]; then
            echo "Sending linting issues to ReviewDog..."
            cat lint_processed.txt | reviewdog -f=golint -name=deno-lint -reporter=github-pr-review -filter-mode=file -level=warning -tee
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_DEBUG: 1

      # Fail the workflow if any checks failed
      - name: Check for failures
        if: steps.fmt.outcome == 'failure' || steps.lint.outcome == 'failure'
        run: exit 1

      # Build check
      - name: Build project
        run: deno task build

      # Commented out for future implementation
      # - name: Type check
      #   run: deno task check:types
      #   continue-on-error: true  # Optional: allow type checks to fail for now
