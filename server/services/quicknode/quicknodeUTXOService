import { CachedQuicknodeRPCService } from "$server/services/quicknode/cachedQuicknodeRpcService.ts";
import { UTXO } from "$lib/types/index.d.ts";
import { AncestorInfo } from "$lib/types/base.d.ts";

// TODO: Utilize as primary utxo fetching source from utxoSer

interface QuickNodeUTXO {
  txid: string;
  vout: number;
  value: number;
  confirmations: number;
  height: number;
  coinbase?: boolean;
}

interface QuickNodeTxSpecific {
  txid: string;
  size: number;
  vsize: number;
  weight: number;
  vin: Array<{
    txid?: string;
    vout?: number;
    txinwitness?: string[];
    sequence: number;
    value?: number;
  }>;
  vout: Array<{
    value: number;
    n: number;
    scriptPubKey: {
      asm: string;
      desc: string;
      hex: string;
      address?: string;
      type: string;
    };
  }>;
  confirmations: number;
  time: number;
  blockTime: number;
  status?: {
    confirmed: boolean;
    block_height?: number;
    block_hash?: string;
    block_time?: number;
  };
}


export class QuicknodeUTXOService {
  private static readonly CACHE_DURATION = 60; // 1 minute cache for UTXOs

  static async getUTXO(
    txid: string,
    vout: number,
    includeAncestors = false,
): Promise<SingleUTXOResponse> {
    try {
        const txResponse = await CachedQuicknodeRPCService.executeRPC<QuickNodeTxSpecific>(
            "bb_getTxSpecific",
            [txid],
        );

        if ("error" in txResponse) {
            return { error: txResponse.error };
        }

        const tx = txResponse.result;
        if (!tx.vout[vout]) {
            return { error: "UTXO not found" };
        }

        let utxo: UTXO = {
            txid,
            vout,
            value: tx.vout[vout].value,
            script: tx.vout[vout].scriptPubKey.hex,
            scriptType: tx.vout[vout].scriptPubKey.type,
            scriptDesc: tx.vout[vout].scriptPubKey.desc,
            vsize: tx.vsize,
            weight: tx.weight,
            witness: tx.vin[0]?.txinwitness,
            coinbase: !tx.vin[0]?.txid, // coinbase transactions don't have input txids
        };

        if (includeAncestors) {
            const ancestorInfo: AncestorInfo = {
                fees: tx.fee || 0,
                vsize: tx.vsize,
                effectiveRate: tx.fee_rate || 0,
                txid: tx.txid,
                vout,
                weight: tx.weight,
                size: tx.size,
                scriptType: tx.vout[vout].scriptPubKey.type,
                witness: tx.vin[0]?.txinwitness,
                sequence: tx.vin[0]?.sequence,
                blockHeight: tx.height, // Changed from tx.blockHeight to match QuickNode response
                confirmations: tx.confirmations,
            };
            utxo.ancestor = ancestorInfo;
        }

        return { data: utxo };
    } catch (error) {
        console.error("Error fetching specific UTXO:", error);
        return { error: "Failed to fetch specific UTXO" };
    }
}

  static async getUTXOs(address: string, options: UTXOOptions = {}) {
    try {
      // First, get basic UTXO information
      const utxos = await this.fetchBasicUTXOs(address, options);
      
      if ("error" in utxos) {
        return utxos;
      }

      // If ancestor information is requested, fetch it for each UTXO
      if (options.includeAncestors && utxos.data) {
        const enrichedUtxos = await this.enrichWithAncestorInfo(utxos.data);
        return { data: enrichedUtxos };
      }

      return utxos;
    } catch (error) {
      console.error("Error in UTXOService:", error);
      return { error: "Failed to fetch UTXOs" };
    }
  }

  private static async fetchBasicUTXOs(address: string, options: UTXOOptions) {
    const params = [address, { confirmed: options.confirmedOnly }];
    
    const response = await CachedQuicknodeRPCService.executeRPC<QuickNodeUTXO[]>(
      "bb_getUTXOs",
      params,
      this.CACHE_DURATION
    );

    if ("error" in response) {
      return { error: response.error };
    }

    // Transform QuickNode UTXOs to our UTXO format
    const formattedUtxos = response.result.map(utxo => ({
      txid: utxo.txid,
      vout: utxo.vout,
      value: utxo.value,
      status: {
        confirmed: utxo.confirmations > 0,
        block_height: utxo.height,
        block_time: undefined, // QuickNode doesn't provide this
      },
      // We'll need to fetch script data separately
    }));

    return { data: formattedUtxos };
  }

  private static async enrichWithAncestorInfo(utxos: UTXO[]) {
    const enrichedUtxos = await Promise.all(
        utxos.map(async (utxo) => {
            try {
                const response = await CachedQuicknodeRPCService.executeRPC<QuickNodeTxSpecific>(
                    "bb_getTxSpecific",
                    [utxo.txid]
                );

                if ("error" in response) {
                    return utxo;
                }

                const tx = response.result;
                const ancestorInfo: AncestorInfo = {
                    fees: tx.fee || 0,
                    vsize: tx.vsize,
                    effectiveRate: tx.fee_rate || 0,
                    size: tx.size,
                    weight: tx.weight,
                    scriptType: tx.vout[utxo.vout]?.scriptPubKey.type,
                    witness: tx.vin[0]?.txinwitness,
                    sequence: tx.vin[0]?.sequence,
                    blockHeight: tx.height, // Changed from tx.blockHeight
                    confirmations: tx.confirmations,
                    txid: tx.txid,
                    vout: utxo.vout,
                };

                return {
                    ...utxo,
                    witness: tx.vin[utxo.vout]?.txinwitness,
                    script: tx.vout[utxo.vout]?.scriptPubKey.hex,
                    ancestor: ancestorInfo,
                };
            } catch (error) {
                console.error(`Failed to enrich UTXO ${utxo.txid}:`, error);
                return utxo;
            }
        })
    );

    return enrichedUtxos;
}

  // Add method to fetch witness information when needed
  static async getWitnessInfo(txid: string) {
    const response = await CachedQuicknodeRPCService.executeRPC<QuickNodeTxSpecific>(
      "bb_getTxSpecific",
      [txid]
    );

    if ("error" in response) {
      return { error: response.error };
    }

    const tx = response.result;
    return {
      data: {
        witness: tx.vin.map(input => input.txinwitness || []),
        scripts: tx.vout.map(output => ({
          hex: output.scriptPubKey.hex,
          type: output.scriptPubKey.type,
          address: output.scriptPubKey.address,
        })),
        size: {
          size: tx.size,
          vsize: tx.vsize,
          weight: tx.weight,
        },
      },
    };
  }
}